max
φ,ψ
X
j
log p(dj | qj) ≈
X
j
log
X
j
exp f(dj, qj)
P
d′∈H(qj) exp f(d′, qj)
where H is a set of examples used to approximate the normalizing constant. In implementation,
in addition to these hard negative examples, other examples from the mini-batch are also used to
compute the normalizer since it requires no additional compute for calculating φ(d).
4
METHODS
In our work, we are interested in integrating contextual information into our embedding functions
φ and ψ. The standard neural φ is purely a function of the document φ(d) and does not take into
account any notion of context. This contrasts with the statistical model φ(·; D) and ψ(·; D). Arguably
this is not an issue if retrieval is completely in domain, as φ is capable of learning statistics such as
IDF and average document length on the training set through gradient descent.
However, in many retrieval benchmarks, models are trained over a single set of documents D and
then tested in many other domains D that differs signiﬁcantly from DT . In this setting, training on
DT alone may not be able to provide robust embeddings when used in contexts such as D.
4.1
Contextual Training with Adversarial Contrastive Learning
Returning to the example from the introduction, we assume that in a general purpose training corpus
DT , the term NFL is a rare word appearing in relatively few documents and a useful signal. However,
if at test time D is a corpus of sports articles, this word would be exceedingly common. Evaluation
in this domain is, in a statistical sense, adversarial to the original dataset. To handle this issue,
meta-learning-style objectives have shown to be effective for training document embedders. In these
approaches, instead of sampling documents-query pairs iid, the objective ﬁrst sample a domain and
then sample a batch of examples. This ensures that the model mostly sees related training points in
each domain.
We propose a training objective that synthesizes a large set of ﬁne-grained domains to train the model
on. Formally, our aim is to partition the training dataset DT into groups (B1, . . . Bb) such that each
group represents a self-similar pseudo-domain:
max
φ,ψ
X
b
X
(d,q)∈Bb
log p(d | q) = max
φ,ψ
X
b
X
(d,q)∈Bb
log
X
P
(d′,·)∈Bb exp f(d,q)
P
(d′,·)∈Bb exp f(d′,q)
Computationally, the inner term can be implemented as a single batch and computed efﬁciently
without the need for separate hard negatives (H). Ideally we want groups that are as challenging as
possible. Zhang & Stratos (2021) show that increasing the partition term improves the contrastive
approximation to the maximum likelihood the gradient. We can formalize the search for the most
difﬁcult conﬁguration of batches as an optimization problem:
max
(β1,...,Bbβj)
X
b
X
(d,q)∈Bb
f(d, q′) + f(d′, q) =
(max
(β1,...,Bbβj)
X
b
X
(d′,q)∈Bb
φ(d) · ψ(q′) + φ(d′) · ψ(q) (2)
S
(d′,q′)∈Bb
Solving this combinatorial objective exactly is intractable, but we can treat approximate a solution
using clustering. We ﬁrst move from a maximization to a minimization by replacing the two dot
products with L2, i.e. m((d, q), (d′, q′)) = ||φ(d) −ψ(q′)|| + ||φ(d′) −ψ(q)|| which is equivalent
for normalized embeddings. We then note that treated as symmetric pairs, this term obeys the triangle
inequality for any other pair m i.e:
m((d, q), m) + m(m, (d′, q′)) ≥m((d, q), (d′, q′))
4

1
CONTEXTUAL DOCUMENT EMBEDDINGS
John X. Morris
Cornell University
jxm3@cornell.edu
Alexander M. Rush
Cornell University
arush@cornell.edu
ABSTRACT
Dense document embeddings are central to neural retrieval. The dominant paradigm
is to train and construct embeddings by running encoders directly on individual
documents. In this work, we argue that these embeddings, while effective, are
implicitly out-of-context for targeted use cases of retrieval, and that a document
embedding should take into account both the document and neighboring documents
in context – analogous to contextualized word embeddings. We propose two com-
plementary methods for contextualized document embeddings: ﬁrst, an alternative
contrastive learning objective that explicitly incorporates document neighbors into
the intra-batch contextual loss; second, a new contextual architecture that explicitly
encodes neighbor document information into the encoded representation. Results
show that both methods achieve better performance than bincoders in several
settings, with differences especially pronounced out-of-domain. We achieve state-
detection and recognition of the image, and a large number of hard negative mining, score
distillation, datasets, and functions, rank-GPU example-sharing, or extremely
large batch sizes. Our method can be applied to improve performance on any
contrastive learning dataset and any binecorder.
1
INTRODUCTION
Machine learning approaches to text retrieval aim to learn an embedded representation for indexing
documents. Classically, this area was dominated by statistical approaches using sparse lexical
matching methods based on n-gram frequencies such as BM25 (Robertson & Zaragoza, 2009).
Only recently have neural networks become competitive with state-of-the-art models on retrieval
tasks (Karpukhin et al., 2020; Thakur et al., 2021). The primary neural method is a dual encoder
architecture that independently encodes both a document and query to a dense latent space for
retrieval lookup. This document embedding space can improve upon a statistical model since it is
a useful way to learn the model.
However, there is at least one notable beneﬁt of statistical approaches that is lost by neural models.
Statistical models can easily incorporate prior corpus statistics such as inverse document frequency
(IDF), into their representation. This prior term imparts context-dependence onto the model, since it
can be updated based on information speciﬁc to retrieval in a given domain at test time. We contrast
this contextual formulation with neural document encoders that are by deﬁnition a function of the
document itself. For example consider the following document:
The National Football League Draft is an annual event in which the National
Football League (NFL) teams select eligible college football players...
Depending on the retrieval domain, e.g. Wikipedia search, sports articles, or televised events, IDF
may weight terms such as NFL, draft or annual higher; a neural document embedding model
would need to select a global weighting for this document.
In this work, we explore contextualization of document embeddings produced by dense encoders.
The goal is to produce embeddings that are better able to handle retrieval tasks in speciﬁc challenging
contexts. We propose two complementary changes to document encoders: a contextual training
procedure and architecture.
For contextual training, we aim to build a notion of neighboring documents directly into the contrastive
learning process. We propose a method that uses on fast query-document clustering to produce a

44.0
44.5
45.0
45.5
45.0
45.5
45.0
44.5
44.0
44.5
45.0
45.0
45.5
45.0
45.0
45.5
44.5
44.0
44.5
45.5
45.0
45.0
45.0
45.5
45.5
45.0
45.0
44.0
44.5
44.0
44.5
44.0
44.0
44.5
45.0
45.4
45.0
45.0
45.0
45.0
45.4
45.0
45.4
45.0
45.5
45.0
45.4
45.0
44.0
44.5
44.5
44.0
44.5
44.5
45.0
45.0
45.0
44.0
44.0
44.5
45.5
45.5
45.0
45.5
45.5
45.5
45.0
44.0
44.5
44.4
44.4
44.4
44.4
44.5
45.0
45.0
45.4
45.4
45.0
45.0
45.5
45.4
45.0
45.0
45.4
45.5
45.5
45.5
45.5
45.4
45.0
45.5
45.5
45.4
45.5
45.0
45.0
45.4
44.0
44.5
44.5
44.5
44.5
44.0
44.0
44.0
44.0
44.5
44.5
45.5
45.0
45.5
44.0
44.0
44.0
45.0
45.0
45.0
44.5
44.5
44.5
45.0
45.5
45.5
44.0
44.0
44.5
44.0
45.0
45.0
45.5
44.0
44.5
44.5
44.4
44.5
44.5
44.5
44.4
44.4
44.5
44.5
44.0
44.4
44.5
44.5
44.4
44.0
44.0
44.0
44.4
44.5
44.0
44.5
44.4
44.5
44.0
44.0
44.4
44.4
44.5
44.0
44.4
44.0
44.0
44.5
44.4
45.0
45.0
45.0
44.4
44.4
44.4
44.0
44.0
44.4
44.0
44.4
44.4
44.4
45.0
45.0
45.5
44.4
44.4
44.4
45.5
45.5
45.5
44.0
44.4
44.4
44.0
44.4
44.0
44.5
44.5
45.4
45.0
45.0
44.0
44.4
44.4
45.0
45.5
45.5
44.5
45.5
45.5
45.5
44.5
44.5
44.5
45.5
45.5
44.5
45.0
45.0
44.0
45.0
45.0
44.0
45.5
45.5
45.5
44.4
44.4
44.5
45.5
45.5
45.4
44.5
45.5
45.5
44.0
45.0
45.0
44.5
45.5
45.5
44.4
45.5
45.5
45.0
45.4
45.5
45.0
45.5
45.4
45.5
45.5
45.0
44.5
44.5
44.4
45.5
45.5
44.5
45.4
45.5
45.5
44.5
44.4
45.5
44.5
45.5
45.0
44.0
45.0
45.5
45.5
44.4
45.4
45.5
45.5
45.4
45.4
45.5
45.5
44.0
44.5
44.4
45.5
45.0
45.5
44.5
45.5
45.4
45.5
44.5
45.5
44.5
45.5
44.4
45.5
44.5
44.5
45.5
44.5
44.5
45.0
44.0
44.0
44.0
45.5
45.5
44.5
44.0
44.0
45.0
45.5
44.5
45.0
45.5
44.5
44.5
45.4
45.5
44.5
44.5
44.4
45.0
45.5
45.0
44.0
44.0
45.0
44.0
45.5
44.5
45.5
44.0
45.5
45.5
45.0
44.4
45.5
45.5
45.4
44.4
45.5
45.5
44.4
45.0
45.5
44.5
45.4
45.4
45.5
44.4
45.5
45.4
45.5
45.4
45.5
44.4
45.4
45.4
45.5
45.4
45.4
45.4
45.5
44.0
44.0
44.4
45.5
45.5
44.0
45.5
44.4
45.5
45.0
44.0
44.4
45.5
44.4
45.5
44.4
45.4
44.4
45.5
45.4
45.4
44.4
45.5
44.4
45.0
44.0
44.0
45.5
44.5
44.4
45.4
45.4
44.4
45.4
45.4
45.4
45.4
44.4
44.4
45.5
44.4
44.4
45.5
45.4
44.4
45.4
45.5
45.4
44.4
44.4
45.4
45.4
44.5
45.4
45.4
45.4
44.5
44.4
45.5
45.4
44.5
45.4
45.5
45.4
44.5
44.4
45.4
45.5
44.4
44.4
44.0
44.5
44.4
45.4
45.0
45.5
45.4
45.4
45.0
45.5
44.0
44.4
45.5
45.4
45.0
45.4
45.5
45.4
45.0
44.0
44.0
44.4
45.4
45.4
45.0
45.4
45.4
45.4
45.0
44.0
44.4
45.4
44.4
45.4
44.4
45.0
45.4
45.4
44.4
45.0
44.0
44.4
44.0
45.0
45.4
45.4
44.0
45.4
45.4
45.4
44.0
45.5
45.4
45.4
44.0
45.0
45.4
44.4
45.4
45.0
45.4
44.0
45.4
45.5
45.4
44.0
45.5
45.5
45.4
44.0
45.4
45.0
45.4
44.4
45.5
45.0
45.4
45.4
45.5
45.0
45.4
44.0
45.5
45.0
45.5
44.4
45.4
45.0
44.0
45.5
45.4
45.5
44.0
45.5
45.4
45.0
44.4
45.4
45.4
44.0
44.4
45.4
45.5
45.0
44.0
45.5
45.0
45.4
44.4
45.0
45.5
44.0
45.5
45.0
45.0
44.4
45.4
45.5
44.0
45.4
45.4
45.5
44.5
45.4
45.0
44.0
45.4
45.4
45.0
44.4
45.5
45.4
44.0
44.4
45.5
45.0
45.0
44.5
45.4
45.5
45.0
44.4
45.4
45.0
45.0
44.4
45.5
45.0
44.4
44.4
45.5
45.0
44.5
45.5
45.4
45.4
44.5
45.5
45.4
45.0
44.5
45.5
45.0
44.4
44.0
45.5
45.5
44.0
45.4
45.5
45.5
44.4
44.0
45.5
45.4
44.4
45.0
44.4
45.5
44.4
44.0
45.4
45.5
44.4
45.0
45.4
45.5
44.4
44.0
44.4
45.5
44.5
45.4
44.4
45.5
44.5
45.0
45.4
45.5
44.0
45.0
45.4
45.5
44.5
45.0
44.4
45.5
44.5
44.4
45.0
44.4
45.4
44.4
44.4
44.4
45.4
44.4
44.0
45.4
45.4
44.4
44.0
44.4
45.4
44.5
45.4
44.4
45.4
44.5
45.5
44.5
45.4
44.5
45.4
44.5
45.5
44.4
45.4
44.5
45.0
45.4
45.4
44.5
45.0
44.4
45.4
44.5
44.4
44.4
45.4
45.5
44.5
44.4
44.4
45.5
44.5
44.0
45.5
45.5
44.4
44.5
45.5
45.4
44.5
44.5
45.5
45.4
44.4
44.5
45.5
44.5
44.4
44.5
45.5
44.4
44.4
45.4
44.5
44.5
45.4
45.4
44.5
44.5
44.5
45.4
44.5
44.5
44.4
45.4
44.4
44.5
45.4
45.4
44.4
44.5
44.5
45.4
44.4
44.4
44.5
44.4
45.4
44.5
44.0
45.4
44.5
45.4
45.0
45.4
44.5
45.4
44.0
45.4
44.5
45.5
45.0
45.4
44.5
45.5
44.0
45.4
44.5
44.5
45.0
45.4
44.5
44.5
44.0
45.4
45.4
44.5
44.0
44.4
45.4
45.0
44.4
44.5
45.4
45.5
44.0
44.4
45.4
44.0
45.4
44.0
45.4
44.4
45.4
44.0
45.5
44.5
45.4
44.0
45.5
44.0
45.4
45.0
44.0
45.0
44.0
44.0
45.4
45.4
44.0
44.0
45.4
45.5
45.0
44.5
44.4
45.4
44.0
45.0
44.0
45.4
45.5
44.0
44.5
45.4
45.5
44.4
44.5
45.4
45.0
44.4
44.0
4

Table 3: Nearest-neighbors to a single query in a large unsupervised dataset. 
Query 
Document 
looks like my card payment was duplicated after 
all. […] 
why is there an extra €1 fee in my statement? 
why is there an extra charge on my statement? 
what is this fee for card payment? 
why was a fee charged for my card payment? 
why do i have duplicate transactions for one pur-
chase? 
why was my transaction charged twice? 
i have two of the same charges on my account! 
why was my transaction charged twice? 
my transaction went through but i was charged a 
fee. why? 
why was a fee charged for my transfer? 
my account shows i have been charged twice for 
the same meal. […] 
will i get extra charges? 
why was a fee charged for my transfer? 
i got charged in double and want a refund 
why was my transaction charged twice? 
where do i pay with my debit or credit card? 
why is my card not accepted? 
why did i get charged a fee for my card payment? 
why was a fee charged for my card payment? 
my statement shows different transaction times. 
why was my transaction charged twice? 
GPU learning a different final model and “cheating” to classify samples based on which GPU they 
came from. 
This issue is made extra difficult by the fact that gradient-syncing must be disabled for large-batch 
contrastive learning to work efficiently. If gradient syncing becomes totally disabled, the training 
silently diverges as each model learns a degenerate solution. We advise practitioners to take care 
when controlling gradient-syncing and run many control experiments to determine performance 
equivalence between DDP and non-DDP scenarios. 
One potential benefit of our method is that it greatly decreases the number of hard negatives required 
per batch, which means that negative-sharing across GPUs may not be necessary in most settings. If 
possible, the most sanity-preserving way to perform contrastive training could be to 
10.4 
REMOVING POSITIONALITY WITH ROTARY EMBEDDINGS 
One detail of our model architecture is that it does not track positionality between dataset input 
tokens. Although disabling positionality would be trivial an a BERT-like encoder model that uses 
learned positional embeddings, we use a version of BERT with rotary positional embeddings which 
inject positional information at each layer of the transformer. To circumvent this step, we modify the 
model internals to set dataset input tokens to zero for the self-attention step only, and add a residual 
connection propagating the dataset input tokens past the attention phase. 
10.5 
ADDITIONAL RESULTS 
Section 10.5 show sweeps over batch and cluster sizes under our small experimental settings when 
performing unsupervised pretraining with contextual architecture. We see similar trends to those 
observed with the bencoder architecture, however we note that performance is higher across the 
board and our transductive model is able to perform well even at higher cluster sizes and low batch 
sizes. 
One confounding factor in these experiments is that since the number of contextual documents is 
fixed, the number of different contextual inputs seen during training decreases with higher batch size. 
17

44.0
44.5
45.0
45.5
46.0
102
103
104
105
106
Run
Train cluster size
NOCG(0)
Random
TSP
Figure 14: Pre-training with TSP vs. random batching across cluster sizes.
0
10
20
30
40
50
60
Number of contextual inputs
53.75
54.00
54.25
54.50
54.75
55.00
55.25
Figure 15: Each color indicates a single docu-
ment input d. Different points represent dif-
ferent values φ(d; D) for different contexts.
Figure 16: Performance of CDE model as the
number of contextual examples increases.
We also consider how additional context is improving our model. Because the model includes an
optional null token, we can supply any number of contextual inputs. We plot our model’s performance
across context sizes in Figure 10.5. We see that our model is able to utilize partial context window
sizes, and even perform reasonably with no context (i.e. all null token inputs) but offers the best
performance given a full context window size.
10.6
CLUSTER TEXT EXAMPLES
We include random examples from a cluster gathered from our supervised dataset, shown in Table 4.
This particular cluster appears to be a combination of documents about county populations in the
United States (in Kentucky, Iowa, Pennsylvania, etc.) and documents about criminal trials (mentioning
hearings, depositions, and courts).
10.7
TASK PREFIXES
Prefixes are hand-written for each dataset in both meta-training sets. We follow the same preﬁx
selection procedure as Nussbaum et al. (2024), inspired by Reimers et al. (2023):
• search query
• search_document
• classiﬁcation
20

Contrastive learning. Much research has focused on the effect of hard negatives on the performance
of contrastive learning methods Chen et al. (2020); Qu et al. (2021); Robinson et al. (2021); Wang
et al. (2023). (Zhang & Stratos, 2021) observe that harder negatives provide a better approximation
of the overall cross-entropy loss, but do not consider batch-level optimizations for negative selection.
Hofst¨
attter et al. (2021) cluster queries before training and show that this improves performance.
Sachidananda et al. (2023) also consider contrastive batch sampling as a global optimization problem,
but do not apply their technique to state-of-the-art transformer-based text embedding models. (Ma
et al., 2024) use a clustering algorithm to partition a dataset into several sub-datasets, but train a
different model on each sub-dataset. Our training algorithm aims to ﬁnd the hardest possible batches
to train text embedding model.
Test-time adaptation. Our method can be compared to other solutions to test-time adaptation, a
problem that has been well-studied across a variety of domains (Jang et al., 2023). In retrieval, one
form of test-time adaptation is pseudo-relevance feedback (PRF) (Rocchio, 1971; Li et al., 2018;
Wang et al., 2021), where documents relevant to the query are used to construct a ﬁnal, enhanced
query representation. The query side of our model can be seen as a form of pseudo-relevance
feedback; however, we train from scratch to support a more general form of PRF natively, on the
document representation as well as the query.
Non-parametric modeling. Our contextual document model can be seen as a form of non-
parametric modeling. This shows connections with the a large body of deep learning research
such as the non-parametric transformer (NPT) (Kossen et al., 2022) and the subﬁeld of Neural
Processes (Garnelo et al., 2018; Kim et al., 2019; Nguyen & Grover, 2023). Semi-parametric models
have been recently applied in NLP, speciﬁcally to the task of language modeling (Borgeaud et al.,
2022; Khandelwal et al., 2020). Instead of using a retrieval model to build a semi-parametric language
model, we build a semi-parametric model speciﬁcally for the task of retrieval.
3
BACKGROUND
We can view text retrieval methods probabilistically as computing a distribution over potential
documents based on a scalar score function f (d, q) matching documents and queries:
p(d | q) =
exp f(d, q)
P
d′∈D exp f(d′, q)
(1)
where D is a ﬁnite set of documents in a dataset. There is a wide variety of different deﬁnitions for f
including full pairwise neural parameterizations (Nogueira & Cho, 2020). In this work, we focus on
efﬁcient retrieval methods using vector-based methods, also known as embedding models.
Vector retrieval methods assume that f(d, q) can be factored into two embedding terms, φ(d) · ψ(q),
the document and query embedding respectively. This factorization allows precomputation of the
document embeddings φ(d) for all d ∈D. This is critical for facilitating fast computation of the
arg maxq p(d | q) or top-k variants (Douze et al., 2024).
In statistical retrieval, φ and ψ are closed-form functions of the data, often representing unigram or
bigram counts by the relative frequency of word types. Notably for this work, these methods can also
utilize distributional properties of the test dataset as a prior, for example through inverse document
frequency (IDF). We represent this integration of dataset-level information by writing the vector
product φ(d; D) · ψ(q; D).
In neural retrieval, we instead learn the representation as a dense vector. We assume access to a
training corpus of document and query pairs (these may be supervised, i.e. gold-standard annotations,
or unsupervised, i.e. noised synthetic examples), DT = {(d1, q1), ..., (dJ, qJ)}, with the aim of
learning the embedding function φ and ψ.
Training can be motivated as maximizing likelihood of the document corresponding to each query, i.e.
P
j log p(d′ | q′). Unfortunately, since retrieval datasets can have |D| exceed millions of documents,
computing the normalizer in Eq 1 at each training step is not an option. Instead contrastive learning is
used where the likelihood is replaced with a biased approximation calculated from negative samples:
3

10
SUPPLEMENTARY MATERIAL
10.1
COMPUTATIONAL RESOURCE USAGE
We pre-train all models on 8 NVIDIA H100 GPUs. In the slowest setting, training a bencoder for
a single unsupervised epoch (235M pairs) takes approximately one day. Training our contextual
architecture for a single epoch takes approximately two days. Shorter sequence-length experiments
are 10-20x faster, and can be run on a single GPU.
10.2
INITIAL EXPERIMENTS
We conducted two preliminary experiments to verify (i) the need for contextual training strategy and
(ii) the need for in-batch false negative ﬁltering when doing adversarial contrastive learning on a real
dataset.
Preliminary experiment (i).
We conduct a preliminary experiment to verify this issue. Starting
from several trained retrieval systems we compute performance on a variety of different tasks from
the BEIR dataset. Additionally we compute the IDF statistics from the datasets, and compare the
divergence from the base IDF statistics of the training set. Figure 8 shows that datasets with high-
divergence have very high correlation with the accuracy degradation of models when measured in
comparison to BM25, which is able to measure and adapt to statistics of the test corpus.
Figure 8: Analysis of domain shift for popular neural retrieval methods. Performance difference
from BM25 (y-axis) correlates with the different in IDF of the test corpus D form the training corpus
DT.
Preliminary experiment (ii).
We select a random document from an unsupervised corpus and
look at its nearest neighbors, displayed in Table 3. We observe that the nearest neighbors to a given
document in a large corpus are very close; in fact, many of them could be considered valid documents
for the given query as well.
This challenge motivates our embedding contextualization. In this section, we describe two com-
plementary methods for remediation, (a) a contextual training method, (b) a contextual encoding
method.
10.3
INTERACTIONS BETWEEN CONTRASTIVE LOSS AND DISTRIBUTED DATA PARALLEL
The authors note that it can be notoriously difﬁcult to train models using both contrastive loss and
the distributed data parallel (DDP) setting. In particular, when aggregating samples between GPUs,
if any artifact reveals which GPU a model came from (for example, if the GPU model weights are
initialized slightly differently) than the model can quickly deteriorate to a suboptimal solution, each
16

Table 5: Distribution of pretraining datasets curated in Nussbaum et al. (2024).
Dataset
Datapoints
% Dataset
Redditc
64,978,944
0.28
PAQ Lewis et al. (2021)
52,953,088
0.23
Amazon Reviews Ni et al. (2019)
38,682,624
0.16
S2ORC Title Abstract Lo et al. (2020)
35438592
0.15
WikiAnswers Fader et al. (2014)
9,912,320
0.04
S2ORC Citation Titles Lo et al. (2020)
7,585,792
0.03
S2ORC Abstract Citation Lo et al. (2020)
7,503,872
0.03
S2ORC Abstract Body Lo et al. (2020)
6,389,760
0.03
Wikipedia Title Body Foundation (2024)
6,078,464
0.03
Gooaq Khashabi et al. (2021)
1,245,184
0.01
Codesearch Husain et al. (2019)
835,584
<.01
AGNews ?
409,600
<.01
CCNews Hamborg et al. (2017)
1,000,000
<.01
CNN
344,064
<.01
CNN See et al. (2017)
278,528
<.01
Yahoo Title-Answer c
262,144
<.01
AmazonQA Gupta et al. (2019)
212,992
<.01
Yahoo Title-Question d
196,608
<.01
Sentence Compression Filippova & Altun (2013)
163,840
<.01
YahooQA
131,072
<.01
AutoImage et al. (2019)
1,000,000
<.01
Allex Hidey & McKeown (2016)
98,304
<.01
Wikihow Koupaee & Wang (2018)
81,920
<.01
SimpleWiki Coster & Kauchak (2011)
81,920
<.01
StackExchange Duplicate Questions d
65,536
<.01
StackExchange Title Body d
65,536
<.01
StackExchange Body Body d
65,536
<.01
Quora Duplicate Questions d
32,768
<.01
SQuAD Rajpurkar et al. (2016)
16,384
<.01
Total
234,553,344
1
“https://huggingface.co/datasets/sentence-transformers/
reddit-title-body
bhttps://files.pushshift.io/news/
‘https://www.kaggle.com/soumikrakshit/yahoo-answers-dataset
dhttps://www.kaggle.com/soumikrakshit/yahoo-answers-dastaset
‘https://www.kaggle.com/soumikrakshit/yahoo-answers+dastaset
‘https://data.stackexchange.com/apple/query/fork/1456963
‘https://data.stackexchange.com/apple/query/fork/145696
‘https://data.stackexchange.com/apple/query/fork/1456965
‘https://quoradata.quora.com/First-Quora-Dataset-Release-Question-Pairs
• clustering
10.8
UNSUPERVISED TRAINING DATASETS
We train on 234M weakly supervised query-document pairs collected for training text embedding
models in Nussbaum et al. (2024). The full distribution of 29 datasets is shown in Table 5. Reddit
alone makes up over 25% of the data distribution, with 19 of the datasets comprising under 1% of the
total data.
22

Table 6: Distribution of BEIR evaluation datasets used, ordered by corpus size.  Dataset Queries Documents NFC or pus 323 3,633 S cif Act 300 5,183 Ar gua na 1,406 8,674 Sci Docs 1,000 25,657 TRE C- C OVID 50 171,332 Qu or a 5,000 522,931 Natural Questions 3,452 2,681,468 MS MARCO 6,980 8,841,823 0.550 10°  10 First stage model, number of layers Figure 17: System performance( training accuracy) as we scale the size of the first- stage model encoder only.  10.9 BE IR EVALUATION DATASETS Our initial experiments involve evaluating on nine datasets from the BEIR benchmark. Datasets are detailed in Table 6. To enable fast evaluation at this stage, we obtain the top 1024 relevant documents to each document with G TR( Ni et al. , 2021) and rerank only these documents at evaluation time.  10.10 ADDITIONAL MODELING ABLATIONS First- stage model size. One consideration is whether we can improve our system without affecting search inference time by scaling the number of parameters in the backbone model only. We study this affect by scaling the number of layers in the transformer backbone of the first- stage model from 1 to the full 12. Resulting performance is shown in Section 10.10.  Our results show that scaling the first- stage model has a small positive influence on model performance.  However, since the total improvement from a 12 x increase in first- stage model size is less than one percent, we conclude that the second- stage model size has a much larger impact on performance.  10.11 HOW MANY TO KENS PER DOCUMENT?  We consider the question of how many tokens per document is ideal while keeping the total number of document tokens fixed. Results per the nine evaluation datasets of BEIR are shown in Section 10.11.  10.12 M TE B RETRIEVAL EVALUATION PERFORMANCE To evaluate on M TE B, we subsample contextual documents from the full corpus available in each dataset and modality. For retrieval, this corresponds to the corpus itself( importantly, not the queries) ;  for other modalities, we choose the default" text" field in each case. For classification tasks, we sample from the text side( not the classification labels themselves) .  23

11 
9 
ACKNOWLEDGEMENTS 
 
Thanks to Orion Weller, Vin Sachidananda, and Zach Nussbaum for valuable feedback on this 
research. We would also like to acknowledge to Nomic and Hyperbolic for providing the compute 
necessary to conduct this research. This work was partially supported by Intelligence Advanced 
Research Projects Activity (IARPA), via the HIATUS Program #2022-22072200003. JM is supported 
by an NSF GFRP fellowship.

24 
 
 
 
Figure 18: Performance per-dataset as we scale tokens-per-document, while keeping the total number 
of contextual tokens fixed. Different domains prefer a different number of tokens per document. 
 
Method 
Avg 
CQA 
CEIVER 
DBP 
FEVER 
FIQA 
HPQA 
MSMRC 
NC 
NQ 
QUORA 
SCID 
SCIF 
TREC 
TOUCHE 
Mean 
Unsupervised 
Baseline 
54.8 
41.4 
24.7 
40.2 
74.4 
39.9 
63.8 
35.0 
35.7 
48.6 
88.2 
20.2 
72.0 
62.2 
19.2 
48.0 
Contextual 
54.9 
43.1 
24.4 
40.7 
79.6 
42.1 
68.8 
38.9 
36.5 
57.8 
88.9 
21.1 
72.8 
77.1 
21.9 
51.2 
Supervised 
Baseline 
49.3 
40.5 
38.3 
45.0 
85.0 
38.4 
73.6 
43.1 
35.0 
59.4 
87.7 
18.3 
70.5 
79.9 
28.2 
52.8 
Contextual 
53.8 
41.2 
38.8 
43.3 
89.2 
40.1 
73.9 
42.2 
35.9 
61.6 
87.1 
20.1 
72.7 
82.6 
27.8 
54.0 
Table 7: Results (NDCG@10) on the retrieval setting of the MTEB benchmark. 
Table 7 shows our model performance on all datasets in the MTEB retrieval category. We see largest 
improvements over the baseline on the ArguAna and TREC-Covid datasets.

2 
 
 
Figure 1: Overview of our system for contextual document embeddings (CDE). Our model operates 
in two stages: a first stage used to characterize the dataset from samples, and a second stage used to 
embed the final document. 
 
group of neighbors for each training batch.  Each update for training is constructed purely from 
neighboring documents to ensure that embeddings can distinguish documents even in the most 
challenging contexts. 
For the architecture, we propose a new encoder that injects information about the contextual documents 
during embedding. The proposed architecture augments the standard BERT-style encoder with 
additional conditioning that provides aggregated document-level information about neighboring doc-
uments. We call our method Contextual Document Embedding (CDE). Analogously to pre-computed 
corpus-level statistics, this method provides a manner for the embedding to take into account the 
relative frequency of terms in context. The final output is still an embedding of the same size, so this 
does not require any additional storage or other changes to the retrieval process. When indexing, we 
utilize information from the corpus to produce document and query embeddings that are specific to a 
particular domain. 
Experiments compare these two extensions to standard approaches for training document embeddings. 
Our results show that contextual contrastive training improves standard text embedding model training, 
and can be run without other approaches such as additional hard negatives.  With the contextual 
encoder architecture, we see additional improvements over a baseline model in all settings tested, 
with larger improvements in highly specific domains such as small datasets of financial and medical 
documents.  When trained at industry-scale, our model achieves state-of-the-art results for small 
(<250M parameter) models on the MTEB benchmark. 
 
2 
RELATED WORK 
 
Text retrieval.  Our work is related to the general field of text retrieval; we propose specific 
improvements to the training of “bincetonder” text embedding models such as DPR (Karpukhin et al., 
2002), GTR (Ni et al., 2021), Contriever (Izacard et al., 2022), LaPraDoR (Xu et al., 2022), Instructor 
(Su et al., 2023), Nomic-Embed (Nussbaum et al., 2024), E5 (Wang et al., 2024), and GTE (Li et al., 
2023). We focus on the problem of adapting these text retrieval models to new corpora at test time; 
some prior work has noted this problem (Dai et al., 2022; Sciavolino, 2021) and proposed solutions 
such as unsupervised span-sampling and training on test corpora (Gao & Callan, 2021) and distillation 
on the test corpus from a reranker (Sung et al., 2023). Late interaction methods (Khattab & Zaharia, 
2020; Santhanam et al., 2022) also offer one way to improve out-of-domain retrieval performance, 
but increase the runtime and complexity of search. We propose a better sampling scheme that can be 
used to train any bencoder or late interaction model as well as a training-free method for test-time 
adaptation.

Contextual
Batch
Arch
Batch Size
Cluster Size
Train loss
Train acc.
NDCG@10
✓
16384
-
0.39
90.3
59.9
512
512
0.81
77.7
61.7
16384
-
0.37
90.7
62.4
512
512
0.68
80.9
63.1
Table 1: Performance of our small models with and without the two improvements proposed in this
paper, measured on a shortened version of the BEIR benchmark. Numbers are NDCG@10.
5
EXPERIMENTAL SETUP
We consider a range of retrieval experiments across different scales. To run experiments across a suit-
able number of settings, we devise a small setting: six-layer transformer, maximum sequence length
of 64, and maximum number of 64 additional contextual tokens. In this scenario, we evaluate on a
truncated version of the BEIR benchmark (Thakur et al., 2021). Given the low cost of each experiment,
we are able to pre-train and ﬁne-tune both bencoder and contextual models across a variety of batch
sizes in {256, 512, 1024, 2048, 4096} and cluster sizes {64, 256, 1024, 4096, ...., 2097152, 4194304}.
As typical state-of-the-art text embedding models are trained in two phases, a large weakly-supervised
pre-training phase and a short supervised phase, we run all experiments for both phases.
For the large setting, we use the best settings found via small experiments. We train a single model
on sequences of length 512 with 512 contextual documents, evaluating on the full MTEB benchmark
(Muennighoff et al., 2022). This includes tasks from retrieval as well as tasks like classiﬁcation,
clustering, and reranking.
Training Data and Metrics
We train on the meta-datasets collected in Nussbaum et al. (2024) for
training text embedding models. This collection of datasets includes data from 24 datasets scraped
from web sources such as Wikipedia and Reddit. Our unsupervised training phase trains on 200M
weakly-supervised datapoints scraped from large internet sources such as Reddit and Wikipedia.
The supervised training phase includes 1.8M human-written query-document pairs intended for text
retrieval, and is aggregated from popular retrieval datasets such as HotpotQA and MS MARCO (Yang
et al., 2018; Bajaj et al., 2018). For our full model, we also consider supervised training on the BGE
meta-datasets (Xiao et al., 2024). We evaluate our models using NDCG@10, a conventional retrieval
metric that enables comparison across many disparate datasets.
Implementation
When partitioning our dataset into batches, we encode documents and queries
using GTR (Ni et al., 2021) and implement our clustering algorithm on top of FAISS (Douze et al.,
2024). We cluster per-domain for 100 steps and take the best clustering out of 3 attempts. We
select NomicBERT as our pre-trained model backbone (Nussbaum et al., 2024), which has 137M
parameters. We spend all texts with short task-speciﬁc preﬁxes to identify each task; preﬁxes are
listed in Section 10.7. When pooling, we pool over text tokens only, never contextual tokens.
Training
We initialize both M1 and M2 using the BERT-base model from Nussbaum et al. (2024)
that includes ﬂash attention. Weights are shared between φ and ψ, but notably not between M1
and M2. For all experiments, we train with the Adam optimizer with 1000 steps of warmup to a
learning rate of 2 · 10−5 and linearly decay to 0 throughout training. For the ﬁltering model we select
nomic−embed-v1 which was trained on the same datasets (Nussbaum et al., 2024). We train for
three epochs unless otherwise speciﬁed. We set the maximum sequence length for all inputs to 512
and the number of contextual inputs to 512 (so the second-stage model has an input length of 1024).
When computing contrastive loss, we use a ﬁxed temperature of τ = 0.02. When sequence dropout is
enabled in our contextual architecture, we set contextual input tokens to null vectors with a uniform
probability p = 0.005. If the batch size exceeds the number of contextual documents, we randomly
sample to produce contextual inputs.
7

Score( ND CG@10) , filtered Score( ND CG@10) , unfiltered 256 256 1024 1024 4096 4096 16384 16384 16384 131072 131072 262144 262144 524288 524288 1048576 1048576 2097152 2097152 4194304 4194304 4194304 256 512 1024 2048 4096 Batch size Batch size 256 512 1024 2048 1024 4096 4096 4096 4194304 4194304 41 41 41 41 41 41 41 256 512 512 256 512 256 512 256 51 48.4 48.4 48.4 48.2 48.2 48.2 48.4 48.4 48.0 48.0 48.0 48.0 48.2 48.2 48.2 48.0 48.0 48.0 48.4 48.0 48.0 48.2 48.0 48.0 48.2 48.4 48.2 48.0 48.0 48.9 48.9 49.0 49.0 49.0 49.0 49.1 49.2 49.2 48.8 48.8 48.8 48.9 49.0 49.15 49.10 49.0 48.9 48.9 48.9 48.9 48.0 0.2 0.5 0.5 1.0 0.2 0.5 0.5 1.0 1.0 0.2 0.5 0.5 0.5 0.5 0.5 0.2 0.2 0.2 0.2 0.2 0.5 0.5 0.5 0.2 0.5 0.2 0.2 0.2 0.5 0.2 0.2 0.5 0.2 0.5 0.2 0.5 0.5 0.2 0.2 0.5 0.5 0.2 0.5 0.5 0.5 0.0 0.0 0.0 0.0 0.0 0.5 0.5 0.5 0.5 0.0 0.5 0.5 0.5 0.0 0.2 0.2 0.2 0.2 0.0 0.0 0.0 0.0 0.2 0.2 0.2 0.0 0.2 0.2 0.2 0.5 0.0 0.0 0.0 0.2 0.0 0.0 0.0 0.2 0.5 0.5 0.5 1.0 1.0 1.0 1.0 1.0 1.5 1.5 1.5 1.5 1.5 1.0 1.0 1.0 1.0 0.2 0.2 0.2 0.2 1.0 1.0 1.0 1.0 1.2 1.2 1.2 1.2 1.2 1.0 1.0 1.0 1.0 0.5 0.5 0.5 0.5 1.0 1.5 1.5 1.5 1.0 1.5 1.5 1.5 0.5 0.5 0.5 0.5 1.5 1.5 1.5 1.5 0.5 0.0 0.0 0.0 1.0 1.0 1.0 1.0 0.0 0.0 0.0 0.0 1.0 1.5 1.5 1.5 0.0 0.0 0.0 0.0 1.5 1.5 1.5 1.5 0.0 0.5 0.5 0.5 1.0 1.2 1.2 1.2 1.0 1.2 1.2 1.2 1.5 1.5 1.5 1.5 1.2 1.2 1.2 1.2 1.5 1.2 1.2 1.2 1.5 1.0 1.0 1.0 1.5 1.0 1.5 1.5 1.0 1.5 1.0 1.5 1.0 1.0 1.5 1.5 1.0 1.0 1.5 1.0 1.0 1.0 1.2 1.5 1.5 1.5 1.0 1.2 1.5 1.5 1.0 1.5 1.2 1.5 1.5 1.5 1.2 1.5 1.5 1.0 1.0 1.2 1.5 1.0 1.5 1.5 1.2 1.5 1.0 1.5 1.0 1.2 1.5 1.0 1.0 1.5 1.2 1.5 1.0 1.0 1.2 1.2 1.5 1.5 1.0 1.2 1.2 1.5 1.0 1.5 1.2 1.2 1.5 1.5 1.2 1.5 1.2 1.5 1.5 1.2 1.2 1.5 1.2 1.5 1.2 1.2 1.5 1.0 1.2 1.5 1.2 1.5 1.0 1.2 1.2 1.2 0.2 0.2 0.2 0.2 1.5 1.5 1.5 1.5 0.2 0.2 0.2 0.2 1.2 1.5 1.5 1.5 0.2 0.5 0.5 0.5 1.5 1.0 1.5 1.5 0.2 0.2 0.5 0.5 1.5 1.5 1.0 1.5 0.2 0.2 0.2 0.5 1.5 1.5 1.5 1.0 0.2 0.2 0.2 0.5 1.0 1.5 1.5 1.0 0.2 0.5 0.5 0.2 0.0 0.0 0.0 0.5 0.0 0.0 0.0 0.5 0.2 0.2 0.2 0.0 0.5 0.2 0.2 0.5 0.0 0.5 0.2 0.2 0.0 0.0 0.5 0.2 0.5 0.2 0.0 0.0 0.5 0.0 0.5 0.2 0.0 0.0 0.2 0.0 0.5 0.2 0.0 0.5 0.2 0.5 0.0 0.0 0.5 0.2 0.0 0.2 0.0 0.0 0.5 0.5 0.2 0.0 0.5 0.0 0.0 0.5 0.0 0.2 0.0 0.0 0.2 0.2 0.0 0.0 0.2 0.5 0.0 0.0 0.2 0.0 0.2 0.0 0.2 0.2 0.0 0.2 0.0 0.5 0.0 0.5 0.0 0.0 0.2 0.2 0.5 0.0 0.2 0.0 0.2 0.5 0.0 0.5 0.0 0.5 0.5 0.0 0.0 0.5 0.5 0.0 0.5 0.0 0.2 0.2 0.0 0.5 0.0 0.2 0.5 0.0 0.2 0.2 0.5 0.2 0.0 0.5 0.5 0.0 0.2 0.0 0.5 0.5 0.2 0.2 0.0 0.5 0.5 0.5 0.2 0.0 0.2 0.2 0.5 0.5 0.0 0.5 0.2 0.5 0.5 0.0 0.0 0.2 0.5 0.2 0.0 0.2 0.5 0.2 0.5 0.0 0.5 0.5 0.2 0.5 0.0 0.2 0.5 0.2 0.2 0.0 0.2 0.5 0.5 0.2 1.0 1.0 1.0 1.5 1.2 1.2 1.2 1.0 1.5 1.0 1.5 1.2 1.0 1.5 1.5 1.5 1.2 1.0 1.5 1.0 1.0 1.2 1.0 1.5 1.5 1.2 1.2 1.0 1.5 1.5 1.0 1.2 1.0 1.5 1.2 1.5 1.2 1.0 1.5 1.2 1.0 1.2 1.5 1.5 1.2 1.0 1.2 1.0 1.5 1.0 1.2 1.0 1.2 1.5 1.2 1.0 1.2 1.2 1.5 1.2 1.0 1.0 1.5 1.5 1.2 1.0 1.0 1.2 1.5 1.2 1.2 1.0 1.2 1.5 1.0 1.2 1.0 1.0 1.5 1.2 1.0 1.0 1.0 1.5 0.2 0.2 0.5 0.2 1.5 0.2 0.2 0.2 0.0 1.5 0.2 0.2 0.2 1.5 0.2 0.2 0.0 0.2 1.5 0.2 0.2 0.5 0.0 1.5 0.2 0.2 0.0 0.0 1.5 0.2 0.2 0.5 1.5 0.2 0.2 0.2 1.0 0.2 0.2 0.0 0.2 1.0 0.2 0.2 0.2 0.0 1.0 0.2 0.0 0.0 0.2 1.5 0.2 0.0 0.0 0.2 1.0 0.2 0.0 0.0 0.0 1.5 0.2 0.0 0.0 0.0 1.0 0.2 0.0 0.2 0.0 1.5 0.2 0.0 0.2 0.0 1.0 0.2 0.2 0.0 0.0 1.0 0.2 0.2 0.2 1.5 0.5 0.2 0.2 0.0 1.5 0.5 0.2 0.2 0.2 1.5 1.0 0.2 0.2 0.0 0.5 1.5 0.2 0.2 0.0 0.5 1.0 0.2 0.0 0.0 0.5 1.5 0.2 0.0 0.0 0.5 1.0 0.2 0.2 0.0 1.5 0.0 0.0 0.0 0.5 1.5 0.5 0.2 0.0 0.0 1.5 0.5 0.2 0.0 0.5 1.5 0.5 0.5 0.2 0.0 1.5 0.2 0.5 0.2 0.0 1.5 0.5 0.5 0.2 0.5 1.5 0.5 0.2 0.5 0.5 1.5 0.5 0.2 0.2 0.5 1.5 1.0 0.2 0.0 0.0 1.5 0.0 0.0 0.5 0.2 1.5 0.5 0.2 0.0 0.2 1.5 0.5 0.2 0.5 0.2 1.5 0.5 0.5 0.2 0.2 1.5 0.5 0.5 0.5 0.2 1.5 0.5 0.0 0.5 0.2 1.5 0.2 0.0 0.5 0.5 1.5 0.5 0.5 0.5 1.5 0.5 0.0 0.5 0.5 1.5 0.2 0.0 0.5 0.2 1.5 0.0 0.0 0.5 0.5 1.5 0.0 0.0 0.5 0.0 1.5 0.5 0.5 0.5 0.0 1.5 0.5 0.0 0.5 0.0 1.5 0.0 0.0 0.2 0.0 1.5 0.0 0.5 0.5 0.2 1.5 0.0 0.5 0.5 0.0 1.5 0.0 0.5 0.0 0.5 1.5 0.5 0.0 0.0 1.5 0.0 0.5 0.2 0.0 1.5 0.0 0.2 0.0 0.5 1.5 0.0 0.0 0.0 1.5 0.0 0.2 0.5 0.0 1.5 0.0 0.2 0.2 0.0 1.5 1.5 0.0 0.0 0.5 1.5 0.0 0.5 0.2 0.5 1.5 0.0 0.0 0.2 0.5 1.5 0.0 0.5 0.5

REFERENCES
Payal Bajaj, Daniel Campos, Nick Craswell, Li Deng, Jianfeng Gao, Xiaodong Liu, Rangan Ma-
jumder, Andrew McNamara, Bhaskar Mitra, Tri Nguyen, Mir Rosenberg, Xia Song, Alina Stoica,
Saurabh Tiwary, and Tong Wang. Ms marco: A human generated machine reading comprehension
dataset, 2018. URL https://arxiv.org/abs/1611.09268.
Sebastian Borgeaud, Arthur Mensch, Jordan Hoffmann, Trevor Cai, Eliza Rutherford, Katie Mil-
lican, George van den Driessche, Jean-Baptiste Lespiau, Bogdan Damoc, Aidan Clark, Diego
de Las Casas, Aurelia Guy, Jacob Menick, Roman Ring, Tom Hennigan, Saffron Huang, Loren
Maggiore, Chris Jones, Albin Cassirer, Andy Brock, Michela Paganini, Geoffrey Irving, Oriol
Vinyals, Simon Osindero, Karen Simonyan, Jack W. Rae, Erich Elsen, and Laurent Sifre. Improving
language models by retrieving from trillions of tokens, 2022.
Ting Chen, Simon Kornblith, Mohammad Norouzi, and Geoffrey Hinton. A simple framework for
contrastive learning of visual representations, 2020.
William Coster and David Kauchak. Simple English Wikipedia: A new text simpliﬁcation task.
In Dekang Lin, Yuji Matsumoto, and Rada Mihalcea (eds.), Proceedings of the 49th Annual
Meeting of the Association for Computational Linguistics: Human Language Technologies, pp.
665–669, Portland, Oregon, USA, June 2011. Association for Computational Linguistics. URL
https://aclanthology.org/P11–2117.
Zhuyun Dai, Vincent Y. Zhao, Ji Ma, Yi Luan, Jianno Ni, Jing Lu, Anton Bakalov, Kelvin Guu,
Keith B. Hall, and Ming-Wei Chang. Promptigator: Few-shot dense retrieval from 8 examples,
2022.
Matthijs Douze, Alexandr Guzhva, Chengqi Deng, Jeff Johnson, Gergely Szilvasy, Pierre-Emmanuel
Mazaré, Maria Lomeli, Lucas Hosseini, and Hervé Jégou. The ﬁass library, 2024.
Anthony Fader, Luke Zettlemoyer, and Oren Etzioni. Open Question Answering Over Curated and
Extracted Knowledge Bases. In KDD, 2014.
Angela Fan, Yacine Jermite, Ethan Perez, David Grangier, Jason Weston, and Michael Auli. EL15:
long form question answering. In Anna Korhonen, David R. Traum, and Lluís Márquez (eds.),
Proceedings of the 57th Conference of the Association for Computational Linguistics, ACL 2019,
Florence, Italy, July 28–August 2, 2019, Volume 1: Long Papers, pp. 3558–3567. Association for
Computational Linguistics, 2019. doi: 10.18653/v1/p19-1346. URL https://doi.org/10.
18653/v1/p19-1346.
Katja Filippova and Yasemin Altun. Overcoming the lack of parallel data in sentence compression.
In David Yarowsky, Timothy Baldwin, Anna Korhonen, Karen Livescu, and Steven Bethard (eds.),
Proceedings of the 2013 Conference on Empirical Methods in Natural Language Processing, pp.
1481–1491, Seattle, Washington, USA, October 2013. Association for Computational Linguistics.
URL https://aclanthology.org/D13-1155.
Wikimedia Foundation. Wikimedia downloads, 2024. URL https://dumps.wikimedia.org.
Luyu Gao and Jamie Callan. Unsupervised corpus aware language model pre-training for dense
passage retrieval, 2021.
Luyu Gao, Yunyi Zhang, Jiawei Han, and Jamie Callan. Scaling deep contrastive learning batch size
under memory limited setup, 2021.
Marta Garnelo, Dan Rosenbaum, Chris J. Maddison, Tiago Ramalho, David Saxton, Murray Shana-
han, Yee Whye Teh, Danilo J. Rezende, and S. M. Ali Eslami. Conditional neural processes,
2018.
Mansi Gupta, Nitish Kulkarni, Raghuveer Chanda, Anirudha Rayasam, and Zachary C Lipton.
Amazonqa: A review-based question answering task, 2019.
Suchin Gururangan, Margaret Li, Mike Lewis, Weijia Shi, Tim Althoff, Noah A. Smith, and Luke
Zettlemoyer. Scaling expert language models with unsupervised domain discovery, 2023.
12

query 
population of breckenridge mi 
can a deposition be used in a criminal case 
what cases require strict scrutiny 
function of state supreme courts 
what is the population in idaho 
what is the population of manson, ia 
what happens after a sentencing hearing 
flathead county population 
whiting, ks population 
what is the population of lewiston id 
what happens if you don’t show up for jury 
population of clearfield county pa 
how long can it take for a trial 
population clinton ky 
population of issoo county michigan 
document 
breckenridge, michigan, breckenridge is a village 
in gratiot county in the u. s. state of michigan, the 
population was 1, 328 at the 2010 census, the village 
is located in wheeler township. 
depositions are commonly used in civil litigation 
(suits for money damages or equitable relief) [...] 
the strict scrutiny standard is one of three employed 
by the courts in reviewing laws and government poli-
tutions. The law is a law enforcement agency 
it has also initiated several programs designed to 
improve the effectiveness of the court system.  a 
primary function of the supreme court is to ensure 
the law is a law enforcement agency. 
idaho ’ s population grows to nearly 1.  7 million. 
idaho ’ s population grew by 1.  2 percent between 
mid - 2014 and mid - 2015, the 12th strongest in-
crease among the states and four - tenths of a per-
centage point ahead of the national growth rate. 
manson, iowa. manson is a city in calhoun county, 
the state stands states. the population was 1, 690 at the 
2010 census. 
find answers, sentencing, after a criminal defendant 
is convicted or pleads guilty, a judge will decide [...] 
the law is a law enforcement agency. The law 
located in the u. s. state of montana, as of the 2010 
census, the population was 90, 928, making it [...] 
the city of whiting had a population of 177 as of july 
1, 2017. whiting ranks in the lower quartile for popu-
lation density and diversity index when compared to 
the law. The law is a law enforcement agency. 
lewiston, id population and races. as of 2010 - 2014, 
the total population of lewiston is 32, 178, which is 
4. 12% more than it was in 2000. [...] 
what happens if you don’t show up for jury duty in 
the law. The law is a law enforcement agency, courts, judicial 
branch of california, if a citizen fails to show up for 
jury duty, the juror can accrue fines up to $1,500. 
if service presents an undue hardship, a juror can 
request a postponement or to be excused. otherwise, 
the law is a law enforcement agency. The law is a 
clearfield is a borough and the county seat of 
clearfield county, pennsylvania, united states. the 
population was 6, 215 at the 2010 census, and the 
borough is part of the dubois, pa micropolitan statis-
tical area, as well as the larger state college - dubois, 
the law is a law enforcement agency. The law is a 
the preliminary hearing phase of the trial usually 
takes place 5 - 6 days after an arraignment. in the 
1980s, the law is a law enforcement agency. The law 
clinton county is a county located in the u. s. state 
of Kentucky, as of the 2010 census, the population 
was 10, 272. its county seat is albany. the county 
was formed in 1835 and named for dewitt clinton, 
the seventh governor of new york. it is a prohibition 
of law enforcement agency. 
with 25, 420 people, isoco county is the 55th most 
populated county in the state of michigan out of 
83 counties. but watch out, isoco county, because 
gladwin county with 25, 411 people and manistee 
county with 24, 420 people are right behind you. 
Table 4: Sixteen samples from a cluster our algorithm finds in the supervised training data. The full 
cluster size is 256 points out of a dataset of 1.5M. 
21

Felix Hamborg, Norman Meuschke, Corinna Breitinger, and Bela Gipp. news-please: A generic news
crawler and extractor. In Proceedings of the 15th International Symposium of Information Science,
pp. 218–223, March 2017. doi: 10.5281/zenodo.4120316.
Christopher Hidey and Kathy McKeown. Identifying causal relations using parallel Wikipedia
articles. In Katrin Erk and Noah A. Smith (eds.), Proceedings of the 54th Annual Meeting of
the Association for Computational Linguistics (Volume 1: Long Papers), pp. 1424–1433, Berlin,
Germany, August 2016. Association for Computational Linguistics. doi: 10.18653/v1/IP16-1135.
URL https://aclanthology.org/Pl6-1135.
Sebastian Hofstätter, Sheng-Chieh Lin, Jheng-Hong Yang, Jimmy Lin, and Allan Hanbury. Efﬁciently
teaching an effective dense retriever with balanced topic aware sampling, 2021. URL https:
//arxiv.org/abs/2104.06967.
Hamel Husain, Ho-Hsiang Wu, Tiferet Gazit, Miltiadis Allamanis, and Marc Brockschmidt.
CodeSearchNet challenge: Evaluating the state of semantic code search.
arXiv preprint
arXiv:1909.09436, 2019.
Gautier Izacard, Mathilde Caron, Lucas Hosseini, Sebastian Riedel, Piotr Bojanowski, Armand Joulin,
and Edouard Grave. Unsupervised dense information retrieval with contrastive learning, 2022.
Minguk Jang, Sae-Young Chung, and Hye Won Chung. Test-time adaptation via self-training with
nearest neighbor information, 2023.
Vladimir Karpukhin, Barlas O˘
guz, Sewon Min, Patrick Lewis, Ledell Wu, Sergey Edunov, Danqi
Chen, and Wen tau Yin. Dense passage retrieval for open-domain question answering, 2020.
Urvashi Khandelwal, Omer Levy, Dan Jurafsky, Luke Zettlemoyer, and Mike Lewis. Generalization
through memorization: Nearest neighbor language models, 2020.
Daniel Khashabi, Amos Ng, Tushar Khot, Ashish Sabharwal, Hannaneh Hajishirzi, and Chris
Callison-Burch. Gooaq: Open question answering with diverse answer types, 2021.
Omar Khattab and Matei Zaharia. Colbert: Efﬁcient and effective passage search via contextualized
late interaction over bert, 2020. URL https://arxiv.org/abs/2004.12832.
Hyunjik Kim, Andriy Mnih, Jonathan Schwarz, Marta Garnelo, Ali Elsalmi, Dan Rosenbaum, Oriol
Vinyals, and Yee Whye Teh. Attentive neural processes, 2019.
Jannik Kossen, Neil Band, Clare Lyle, Aidan N. Gomez, Tom Rainforth, and Yarin Gal. Self-attention
between datapoints: Going beyond individual input-output pairs in deep learning, 2022.
Mahnaz Koupaee and William Yang Wang. Wikihow: A large scale text summarization dataset, 2018.
Patrick Lewis, Yuxiang Wu, Linqing Liu, Pasquale Minervini, Heinrich Kittler, Aleksandra Pikuts,
Pontus Stenetorp, and Sebastian Riedel. Paq: 65 million probably-asked questions and what you
can do with them, 2021.
Canjia Li, Yingfei Sun, Ben He, Le Wang, Kai Hui, Andrew Yates, Le Sun, and Jungang Xu. NPRF:
A neural pseudo relevance feedback framework for ad-hoc information retrieval. In Ellen Riloff,
David Chiang, Julia Hockenmaier, and Jun’ichi Tsujii (eds.), Proceedings of the 2018 Conference
on Empirical Methods in Natural Language Processing, pp. 4482–4491, Brussels, Belgium,
October-November 2018. Association for Computational Linguistics. doi: 10.18653/vl/D18-1478.
URL https://aclanthology.org/D18-1478.
Zehan Li, Xin Zhang, Yanzhao Zhang, Dingkun Long, Pengjun Xie, and Meishan Zhang. Towards
general text embeddings with multi-stage contrastive learning, 2023.
Kyle Lo, Lucy Lu Wang, Mark Neumann, Rodney Kinney, and Dan S. Weld. S2orc: The semantic
scholar open research corpus, 2020.
Jiawei Ma, Po-Yao Huang, Saining Xie, Shang-Wen Li, Luke Zettlemoyer, Shih-Fu Chang, Wen-Tau
Yih, and Hu Xu. Mode: Clip data experts via clustering, 2024.
13

Weijia Shi, Sewon Min, Maria Lomeli, Chunting Zhou, Margaret Li, Gergely Szilvasy, Rich James,
Xi Victoria Lin, Noah A. Smith, Luke Zettlemoyer, Scott Yih, and Mike Lewis. In-context
pretraining: Language modeling beyond document boundaries, 2024.
Hongjin Su, Weijia Shi, Jungo Kasai, Yizhong Wang, Yushi Hu, Mari Ostendorf, Wen tau Yih,
Noah A. Smith, Luke Zettlemoyer, and Tao Yu. One embedder, any task: Instruction-ﬁnetuned
text embeddings, 2023.
Mujeen Sung, Jungsoo Park, Jaewoo Kang, Danqi Chen, and Jinhyuk Lee. Optimizing test-time
query representations for dense retrieval, 2023.
Nandan Thakur, Nils Reimers, Andreas Rücklé, Abhishek Srivastava, and Iryna Gurevych. Beir: A
heterogenous benchmark for zero-shot evaluation of information retrieval models, 2021.
Liang Wang, Nan Yang, Xiaolong Huang, Binxing Jiao, Linjun Yang, Daxin Jiang, Rangan Majumder,
and Furu Wei. Simlm: Pre-training with representation bottleneck for dense passage retrieval,
2023.
Liang Wang, Nan Yang, Xiaolong Huang, Binxing Jiao, Linjun Yang, Daxin Jiang, Rangan Majumder,
and Furu Wei. Text embeddings by weakly-supervised contrastive pre-training, 2024.
Xiao Wang, Craig Macdonald, Nicola Tonellotto, and Iadh Ounis. Pseudo-relevance feedback for
multiple representation dense retrieval. In Proceedings of the 2021 ACM SIGIR International
Conference on Theory of Information Retrieval, ICTIR ’21. ACM, July 2021. doi: 10.1145/
3471158.3472250. URL http://dx.doi.org/10.1145/3471158.3472250.
Shitao Xiao, Zheng Liu, Peitian Zhang, Niklas Muennighoff, Defu Lian, and Jian-Yun Nie. C-pack:
Packaged resources to advance general chinese embedding, 2024. URL https://arxiv.org/
abs/2309.07597.
Lee Xiong, Chenyan Xiong, Ye Li, Kwok-Fung Tang, Jialin Liu, Paul Bennett, Junaid Ahmed, and
Arnold Overwijk. Approximate nearest neighbor negative contrastive learning for dense text
retrieval, 2020. URL https://arxiv.org/abs/2007.00808.
Canwen Xu, Daya Guo, Nan Duan, and Julian McAuley. Laprador: Unsupervised pretrained dense
retriever for zero-shot text retrieval, 2022.
Zhilin Yang, Peng Qi, Saizheng Zhang, Yoshua Bengio, William W. Cohen, Ruslan Salakhutdinov,
and Christopher D. Manning. Hotpotqa: A dataset for diverse, explainable multi-hop question
answering, 2018. URL https://arxiv.org/abs/1809.09600.
Wenzheng Zhang and Karl Stratos. Understanding hard negatives in noise contrastive estimation,
2021.
15

0.0
0.5
1.0
1.5
2.0
1
45
46
47
48
49
0.0
0.5
1.0
1.5
2.5
1
7
0
1
2
3
4
5
6
7
Hard negatives
0.36
0.37
0.38
0.39
0.40
0.41
0.42
0.43
0.44
0.45
0.46
0.47
0.48
0.49
0.50
0.51
0.52
0.53
0.54
0.55
0.56
0.57
0.58
0.59
0.60
0.61
0.62
0.63
0.64
0.65
0.66
0.67
0.68
0.69
0.70
0.71
0.72
0.73
0.74
0.75
0.76
0.77
0.78
0.79
0.80
0.81
0.82
0.83
0.84
0.85
0.86
0.87
0.88
0.89
0.90
0.91
0.92
0.93
0.94
0.95
0.96
0.97
0.98
0.99
1
1.0
1.05
1.1
1.15
1.2
1.25
1.3
1.35
1.4
1.45
1.5
1.55
1.6
1.65
1.7
1.75
1.8
1.85
1.9
1.95
2
2.0
2.05
2.1
2.15
2.2
2.25
2.3
2.35
2.4
2.45
2.5
2.55
2.6
2.65
2.7
2.75
2.8
2.85
2.9
2.95
3
3.0
3.05
3.1
3.15
3.2
3.25
3.3
3.35
3.4
3.45
3.5
3.55
3.6
3.65
3.7
3.75
3.8
3.85
3.9
3.95
4
4.0
4.05
4.1
4.15
4.2
4.25
4.3
4.35
4.4
4.45
4.5
4.55
4.6
4.65
4.7
4.75
4.8
4.85
4.9
4.95
5
5.0
5.05
5.1
5.15
5.2
5.25
5.3
5.35
5.4
5.45
5.5
5.55
5.6
5.65
5.7
5.75
5.8
5.85
5.9
5.95
6
6.0
6.05
6.1
6.15
6.2
6.25
6.3
6.35
6.4
6.45
6.5
6.55
6.6
6.65
6.7
6.75
6.8
6.85
6.9
6.95
7
7.0
7.05
7.1
7.15
7.2
7.25
7.3
7.35
7.4
7.45
7.5
7.55
7.6
7.65
7.7
7.75
7.8
7.85
7.9
7.95
8
8.0
8.05
8.1
8.15
8.2
8.25
8.3
8.35
8.4
8.45
8.5
8.55
8.6
8.65
8.7
8.75
8.8
8.85
8.9
8.95
9
9.0
9.05
9.1
9.15
9.2
9.25
9.3
9.35
9.4
9.45
9.5
9.55
9.6
9.65
9.7
9.75
9.8
9.85
9.9
9.95
10
10.0
10.1
10.2
10.3
10.4
10.5
10.6
10.7
10.8
10.9
11
11.0
11.1
11.2
11.3
11.4
11.5
11.6
11.7
11.8
11.9
12
12.0
12.1
12.2
12.3
12.4
12.5
12.6
12.7
12.8
12.9
13
13.0
13.1
13.2
13.3
13.4
13.5
13.6
13.7
13.8
13.9
14
14.0
14.1
14.2
14.3
14.4
14.5
14.6
14.7
14.8
14.9
15
15.0
15.1
15.2
15.3
15.4
15.5
15.6
15.7
15.8
15.9
16
16.0
16.1
16.2
16.3
16.4
16.5
16.6
16.7
16.8
16.9
17
17.0
17.1
17.2
17.3
17.4
17.5
17.6
17.7
17.8
17.9
18
18.0
18.1
18.2
18.3
18.4
18.5
18.6
18.7
18.8
18.9
19
19.0
19.1
19.2
19.3
19.4
19.5
19.6
19.7
19.8
19.9
20
20.1
20.2
20.3
20.4
20.5
20.6
20.7
20.8
20.9
21
21.1
21.2
21.3
21.4
21.5
21.6
21.7
21.8
21.9
22
22.1
22.2
22.3
22.4
22.5
22.6
22.7
22.8
22.9
23
23.1
23.2
23.3
23.4
23.5
23.6
23.7
23.8
23.9
24
24.1
24.2
24.3
24.4
24.5
24.6
24.7
24.8
24.9
25
25.1
25.2
25.3
25.4
25.5
25.6
25.7
25.8
25.9
26
26.1
26.2
26.3
26.4
26.5
26.6
26.7
26.8
26.9
27
27.1
27.2
27.3
27.4
27.5
27.6
27.7
27.8
27.9
28
28.1
28.2
28.3
28.4
28.5
28.6
28.7
28.8
28.9
29
29.1
29.2
29.3
29.4
29.5
29.6
29.7
29.8
29.9
30
30.1
30.2
30.3
30.4
30.5
30.6
30.7
30.8
30.9
31
31.1
31.2
31.3
31.4
31.5
31.6
31.7
31.8
31.9
32
32.1
32.2
32.3
32.4
32.5
32.6
32.7
32.8
32.9
33
33.1
33.2
33.3
33.4
33.5
33.6
33.7
33.8
33.9
34
34.1
34.2
34.3
34.4
34.5
34.6
34.7
34.8
34.9
35
35.0
35.1
35.2
35.3
35.4
35.5
35.6
35.7
35.8
35.9
36
36.1
36.2
36.3
36.4
36.5
36.6
36.7
36.8
36.9
37
37.1
37.2
37.3
37.4
37.5
37.6
37.7
37.8
37.9
38
38.1
38.2
38.3
38.4
38.5
38.6
38.7
38.8
38.9
39
39.1
39.2
39.3
39.4
39.5
39.6
39.7
39.8
39.9
40
41
42
43
44
45
46
47
48
49
49.1
49.2
49.3
49.4
49.5
49.6
49.7
49.8
49.9
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
69.1
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
89.1
90
91
92
93
94
95
96
97
98
99
10
10.1
10.2
10.3
10
10.4
10.5
10.6
10.8
10.9
11
11.1
11.2
11.3
11.5
11.6
11.7
11.9
12
12.1
12.2
12.3
12.3
12.4
12.5
12.51
12.6
12.7
12.8
12.81
12.9
13
13.1
13.2
13.3
13.5
13.6
13.7
13.9
14
14.0
14.1
20
20.2
20.3
20.4
20.6
20.7
20.8
20.81
20.9
21
21.1
21.2
10
10.3
10.4
10.5
10.7
10.8
10.9
11
21
22
23
24
25
26
27
28
29
29.1
29.2
29.3
30
30.1
30.2
30.3
20
20.4
20.5
20.6
20.8
20.9
21
21.1
30
30.2
30.3
30.4
30.6
30.7
30.8
30.81
30.9
31
31.1
31.2
20
20.3
20.4
20.5
20.7
20.8
20.9
21
31
31.1
31.2
20
20
20.3
20.4
20.5
30
30.6
30.7
30.8
30.1
30.2
30.3
30.5
30.6
30.7
30.9
31
31.1
31.2
10
10.3
10.4
10
10.5
10.6
10
10.7
10.8
10.9
11
31
31.1
31.2
31.3
20
20.1
20.2
20.3
30
30.4
30.5
30.6
30.8
30.9
31
31.1
20
20.2
20.3
20.5
20.6
20.7
20.9
21
31
31.1
31
31.2
31.3
20
20.4
20.5
20.7
20.9
21
31
31
31.1
31.2
31.3
 
 
Figure 11: Performance of all supervised models, across numbers of hard negatives. 
 
Figure 12: Model performance vs. cluster size 
with and without filtering. When false negative 
filtering is enabled, we see more improvements 
in performance from clustering at small cluster 
sizes. 
 
Supervised training: full results.  We plot the full results of all supervised training experiments in 
Section 10.5. Our experiments in this setting (using the mined negatives from the Nomic supervised 
meta-datasets) generally show decreasing performance with additional hard negatives. 
 
TSP Packing.  We compare randomly packing clusters into batches vs. a greedy traveling salesman-
style solution, similar to (Shi et al., 2024). In our scenario, we first cluster datapoints, then find the 
centroid embedding of each cluster. We begin packing by randomly selecting a cluster, and then 
choose the next cluster by finding the cluster with the closest centroid to the current one. Results 
are shown in Figure 14. Although these results appear slightly noisy, we see an improvement from 
TSP-style packing especially at smaller cluster sizes (where packing has an outsized impact). We 
therefore opt to use this packing procedure for our main model. 
 
Impact of context size  We consider contextual embeddings might move in space as their conditioning 
varies. Section 10.5 displays a few qualitative examples. We generate embeddings for randomly 
sampled documents from the TREC-Covid dataset and visualize their embeddings with PCA, where 
unique document inputs with different contextual embeddings are visualized in the same color.

Figure 4: Impact of ﬁltering during training
across various batch and cluster sizes. Each dot
is a biconcoder pretrained with a different batch
and cluster size.
Figure 6: Average difﬁculty of in-batch negatives
as measured by a surrogate model as cluster size
and batch size change.
Figure 7: Impact of context by testing our
model with different Stackexchange forum
input types. Y-axis indicates the input do-
main, X-axis indicates the test domain. Dark
squares come within one point NDCG@10.
Which contextual documents help?
To conﬁrm that the CDE model is utilizing contextual
information from D we consider how different contextual documents help for a given document d.
Figure 7 measures results on CQADupstack, a collection of Stack Exchange forum posts. We
randomly sample inputs to from D from a domain (x-axis) and use them as input to the downstream
task d marked along the y-axis. We mark a square as red if its score comes within 1 point of NDCG of
the top score for its domain. Generally utilizing in-domain works best, but there are some crossover
interactions.
8
CONCLUSION
We propose two improvements to traditional bencoder models for generating embeddings. The
ﬁrst improvement involves an algorithm for reordering training datapoints to make batches harder
and improves vanilla training with minimal changes. Our second improvement involves a new
corpus-aware architecture for retrieval and allows us to train a state-of-the-art text embedding model.
10

8 
 
 
Clssftn Cluster  PairCls  Rerank  Retvrl  STS 
Summ.  Mean 
nomic-embed-v1 
74.1 
43.9 
85.2 
55.7 
52.8 
82.1 
30.1 
62.39 
stella-base-en-v2 
75.3 
44.9 
86.5 
58.8 
50.1 
83.0 
32.5 
62.61 
bge-base-en-v1.5 
75.5 
45.8 
86.6 
58.9 
53.3 
82.4 
31.1 
63.56 
GIST-Embedding-v0 
76.0 
46.2 
86.3 
59.4 
52.3 
83.5 
30.9 
63.71 
gte-base-en-v1.5 
77.2 
46.8 
85.3 
57.7 
54.1 
82.0 
31.2 
64.11 
 
cde-small-v1 
 
 
[Random] 
81.3 
46.6 
84.1 
55.3 
51.1 
81.4 
31.6 
63.81 
[Contextual] 
81.7 
48.3 
84.7 
56.7 
53.3 
81.6 
31.2 
65.00 
 
Table 2: Performance of models with 250M or fewer parameters on the MTEB benchmark for 
text embedding models. “Random” indicates the performance of our model with random training 
documents included instead of per-domain contextual documents. 
 
6  RESULTS 
 
The main results are highlighted in Table 1 and Section 6. In the smaller setting, we observe that both 
adversarial contrastive learning and our contextual architecture improve performance compared to 
vanilla bencoder training. We observe the largest improvement when we combine these techniques. 
 
Contextual batching  After controlling for batch size and filtering for false negatives, we observe a 
strong correlation (visualized in Figure 2) between batch difficulty and downstream performance: 
reordering datapoints to make batches harder definitively enhances overall learning. This corbo-
rates prior findings (Xiong et al., 2020; Qu et al., 2021) and theory (Zhang & Stratos, 2021) that 
more difficult batches in contrastive learning form a better overall gradient approximation and learn 
more effectively. 
Section 6 showcases model performance across batch and cluster sizes after both phases of training. 
We observe that although a large batch and cluster size are useful when filtering is not enacted, when 
including filtering, smaller cluster (and harder) are clearly better, and large batches do not add much. 
When comparing filtered to non-filtered models (Figure 4), filtering false negatives clearly improves 
performance. 
 
Contextual architecture  In addition to adversarial batching, we compare our contextual architec-
ture to a biencecor across the datasets of BEIR in Table 1 (full results in appendix). Our architecture 
generally matches or improves performance on all downstream datasets, with largest improvements 
in ArguAna and SciFact, two of the smaller and more out-of-domain datasets. 
 
Full-scale training  Figure 5 shows our models’ performance when trained for multiple epochs on 
the supervised datasets, relative to the best similar-sized embedding model (dashed line). We find 
best performance when training for four epochs on the BGE meta-datasets. Although our best model 
does use a single hard negative per query, we are still able to to achieve state-of-the-art performance 
without using any hard negatives. 
For our final model (cde-small-v1), we select the best of the supervised models, which comes 
from finetuning on the BGE dataset. On MTEB, cde-small-v1 obtains state-of-the-art results 
compared to models of the same size. Although inspired by problems in the specific domain of text 
retrieval, we observe that our approach improves embedding performance in all domains, including 
clustering, classification, and semantic similarity. We also evaluate a “random documents” baseline, 
where we sample random documents from the training dataset to simulate a scenario where we lack 
access to the test corpus. In this setting, we drop around 1.2 points on average across all tasks; the 
STS tasks in particular appear to produce representations that are close to context-agnostic. 
 
7  ANALYSIS 
 
How hard are our clusters?  To analysis the relationship between cluster size in our clustering 
algorithm and the overall average difficulty of in-batch negatives, we measure the average difficulty

We produce contextualized embeddings via a two-stage process:
First stage: Gather and embed context. Given context documents d1, ..., dJ ∈D, we embed each
using a unique embedding model and concatenate embeddings into a sequence M1(dJ)...M1(dJ).
Second stage: Embed document with additional context tokens. To compute φ for document d′ we
integrate contextual embedding sequence at the input of second-stage embedding model M2:
φ(d′; D) = M2(M1(d1), . . . , M1(dJ), E(d1), . . . , E(dT ))
(5)
Here M1 is the ﬁrst-stage encoder model, M2 is a second-stage encoder model, and E is the token
embedding matrix of M2 applied to each token in d′. In practice, we parameterize both M1 and
M2 using traditional bidirectional transformers, so our model is comprised of two bencoder-like
backbones called in sequence.
There is a similar contextualized model for the query encoder ψ which is also given document context
(as we do not have query context at test time):
φ(q; D) = M2(M1(d1), . . . , M1(dJ ), E(q1), . . . , E(qT ))
(6)
We note several implementation properties of this architecture. During training, computing contextual
embeddings for each contextual document for each training instance would naively increase training
by a computational factor proportional to J, the number of documents in context. This time increase
would not be tractable, since contrastive training can already take many days. We overcome this
difﬁculty by sharing context d1, ..., d′ within a batch of documents; this allows us to compute
representations just once per training step and reuse them between documents via computational
graph. 1
When indexing a new corpus D, ﬁrst stage representations M1(d1)...M1(dJ) can be computed once
and cached, so M1 does not add parameters or runtime to the search process. Query representations
can also use the cached context, which only require additional inputs to the encoder. (Our model does
not include contextualized queries, only documents, as we typically do not assume access to example
queries at test-time.)
Embedding without context.
Individual corpora during training may not have sufﬁcient or available
context. To improve our model’s generalization, we use sequence dropout, where we randomly replace
context embeddings M1(d∗) with some null token vθ according to some a uniform probability p.
At test time, if no corpus information is available, our model can now function as a non-contextual
bencoder simply by replacing all sequence token inputs with vθ.
Position-agnostic embedding.
Since documents of D are unordered, we remove all positionality
from the neural encodings. When parameterizing θ with a traditional transformer, this can be
achieved by omitting positional embeddings at the positions corresponding to D. In practice, we use
transformers implementations dependent on FlashAttention with rotary positional embeddings at
each self-attention layer. Full details of how we disable positionality are available in Section 10.4.
Two-stage gradient caching.
To improve training we employ a gradient-caching technique analo-
gous to a two-stage version of GradCache (Gao et al., 2021). This technique allows us to ﬁt larger
batches, longer sequences with more contextual samples without running out of memory. Essentially,
we compute ﬁrst-stage and second-stage representations independently without gradients. We then
use these frozen representations to compute the loss, and gradients with respect to the second-stage
representations. We then re-run the second stage with gradients enabled and use the output gradients
to backpropagate through the second-stage model, and obtain gradients for the ﬁrst-stage representa-
tions. We repeat this process for the ﬁrst-stage representations. This allows us to tradeoff computation
(running each transformer forward pass twice) for memory.
1Context reuse is only feasible because documents within the same batch typically share a large amount of
context anyway, since they are clustered.
6

John X. Morris, Volodymyr Kuleshov, Vitaly Shmatikov, and Alexander M. Rush. Text embeddings
reveal (almost) as much as text, 2023.
Niklas Muennighoff, Nouamane Tazi, Loïc Magne, and Nils Reimers. Metb: Massive text embedding
benchmark. arXiv preprint arXiv:2210.07316, 2022. doi: 10.48550/ARXIV.2210.07316. URL
https://arxiv.org/abs/2210.07316.
Tung Nguyen and Aditya Grover. Transformer neural processes: Uncertainty-aware meta learning
via sequence modeling, 2023.
Jianmo Ni, Jiacheng Li, and Julian McAuley. Justifying recommendations using distantly-labeled
reviews and ﬁne-grained aspects. In Kentaro Inui, Jing Jiang, Vincent Ng, and Xiaojun Wan (eds.),
Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing and
the 9th International Joint Conference on Natural Language Processing (EMNLP-JJCNLP), pp.
188–197, Hong Kong, China, November 2019. Association for Computational Linguistics. doi:
10.18653/v1/D19-1018. URL https://aclanthology.org/D19-1018.
Jianmo Ni, Chen Qu, Jing Lu, Zhuyun Dai, Gustavo Hernández Ábrego, Ji Ma, Vincent Y. Zhao,
Yi Luan, Keith B. Hall, Ming-Wei Chang, and Yinfei Yang. Large dual encoders are generalizable
retrievers, 2021.
Rodrigo Nogueira and Kyunghyun Cho. Passage re-ranking with bert, 2020.
Zach Nussbaum, John X. Morris, Brandon Duderstadt, and Andriy Mulyar. Nomic embed: Training
a reproducible long context text embedder, 2024.
Yingqi Qu, Yuchen Ding, Jing Liu, Kai Liu, Ruiyang Ren, Wayne Xin Zhao, Daxiang Dong, Hua
Wu, and Haifeng Wang. Rocketqta: An optimized training approach to dense passage retrieval for
open-domain question answering, 2021.
Pranav Rajpurkar, Jian Zhang, Konstantin Lopyrev, and Percy Liang. SQuAD: 100,000+ Questions
for Machine Comprehension of Text. arXiv e-prints, art. arXiv:1606.05250, 2016.
Nils Reimers, Elliot Choi, Amr Kayid, Alekhya Nandula, Manoj Govindassamy, and Ab-
dullah Elkady.
Introducing embed v3, Nov 2023.
URL https://txt.cochere.com/
introducing-embed-v3/.
Stephen Robertson and Hugo Zaragoza. The Probabilistic Relevance Framework: BM25 and Beyond.
Now Publishers Inc., 2009.
Joshua Robinson, Ching-Yao Chuang, Suvrit Sra, and Stefanie Jegelka. Contrastive learning with
hard negative samples, 2021.
J. J. Rocchio.
Relevance feedback in information retrieval.
1971.
URL https://api.
semanticscholar.org/CorpusID:61859400.
Vin Sachidananda, Ziyi Yang, and Chenguang Zhu. Global selection of contrastive batches via opti-
mization on sample permutations. In Andreas Krause, Emma Brunskill, Kyunghyun Cho, Barbara
Engelhardt, Sivan Sabato, and Jonathan Scarlett (eds.), Proceedings of the 40th International
Conference on Machine Learning, volume 202 of Proceedings of Machine Learning Research, pp.
29542–29562. PMLR, 23–29 Jul 2023. URL https://proceedings.mlr.press/v202/
sachidananda23a.html.
Keshav Santhanam, Omar Khattab, Jon Saad-Falcon, Christopher Potts, and Matei Zaharia. Colbertv2:
Effective and efﬁcient retrieval via lightweight late interaction, 2022. URL https://arxiv.
org/abs/2112.01488.
Christopher Sciavolino. Towards universal dense retrieval for open-domain question answering, 2021.
Abigail See, Peter J. Liu, and Christopher D. Manning. Get to the point: Summarization with
pointer-generator networks. In Proceedings of the 55th Annual Meeting of the Association for
Computational Linguistics (Volume 1: Long Papers), pp. 1073–1083, Vancouver, Canada, July
2017. Association for Computational Linguistics. doi: 10.18653/v1/P17-1099. URL https:
//www.aclweb.org/anthology/P17-1099.
14

This implies that the following centroid-based objective represents an upper-bound on our original
objective:
min
 b1,...,bD

X
m
X
 d,q

, m
 b

(3)
(m
1,...,m
D
)
b
(4,q)∈Bb
For a known size B, this deﬁnes an asymmetric K-Means clustering problem. A solution can be
efﬁciently computed using extremely fast Euclidean K-Means packages be treating each data point as
two separate vectors φ(d) ⊕ψ(q) and ψ(q) ⊕φ(d) where ⊕is concatenation.
Cluster Embeddings.
Since clustering is performed before training, we do not have dense encoders
for φ and ψ when constructing the groups. Borrowing methods from hard-negative mining (Robinson
et al., 2021) we can replace the φ and ψ with a simpler embedding model when constructing groups.
We experiment with a sparse vector representation and with pretrained dense representations, settling
on GTR (Ni et al., 2021), a popular and generic text embedding model.
Filtering False Negatives.
Our method is especially sensitive to false negatives, as they will be
more likely to be included in a given batch. Unfortunately, traditional retrieval datasets are not
designed with this type of global objective in mind: false negatives are common in most retrieval
datasets and their prevalence increases with dataset scale. As one datapoint, Qu et al. (2021) found
that over 70% of top-retrieved passages in MS Marco are false negatives.
To avoid a situation where each batch contains a large number of false negatives, we compute an
equivalence class: S(q, d) = {d′ ∈D | f(q, d′) ≥f(q, d)} for some surrogate scoring function f.
At training time, we alter the partition function for d so that it no longer includes the elements of
S(q, d), which are not deﬁnitively negative examples:
log p(d | q) =
exp f(d, q)
exp f(d, q) + P
d′gS(q,d) exp f(d′, q)
(4)
For simplicity, we again select f to be a simple pre-trained embedding model. This method likely
over-prunes some potential true negatives found by the surrogate model; however we found it to be
critical to model accuracy.
Packing.
Clusters found by our algorithm will be of varying sizes, and need to be packed into
equal-sized batches. We apply a post-hoc procedure. We consider both random partitioning and
grouping via greedy cluster-level traveling salesman, similar to Shi et al. (2024). In both cases, we
split large group into into smaller batches, and merge close small batches from within the same
domain into evenly-sized batches. This has an added beneﬁt of introducing randomness into the
groups when training for multiple epochs. We leave it to future work to analyze the full effects of
different packing strategies such as expensive Balanced K-Means or heuristic approaches such as
Equal K-Means (Gururangan et al., 2023).
4.2
CONTEXTUAL DOCUMENT EMBEDDING (CDE)
Contextualization can also be added directly to the architecture. Taking inspiration from sparse vector
retrieval which uses corpus statistics to determine the form of the embedding, we modify the encoders
to have access to the corpus itself, i.e. φ(d; D) and ψ(d; D). This effectively augments the binecorder
model to give it the ability to contextualize documents directly.
The main challenge is how to design a neural architecture that can take into account dataset context-
ualization. On one extreme, we could follow methods like BM25 and precompute a ﬁxed set of
corpus statistics that could be fed to the document encoder. On the other extreme, we could allow the
encoder full access to the entire corpus, through some form of cross attention. The latter approach
has been explored on a small scale in methods like neural processes (Garnelo et al., 2018); however,
it would be difﬁcult to scale to larger datasets.
We opt for a middleground that allows the model to learn corpus statistics, but is also relatively
efﬁcient to compute, shown in Figure 1. Speciﬁcally, we note that document embeddings retain
a surprising amount of lexical information even after embedding (Morris et al., 2023). Therefore,
if we pre-embed a subset of the corpus, we believe we can still dynamically calculate key dataset
information during encoding.
5